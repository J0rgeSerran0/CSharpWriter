<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CodabarError" xml:space="preserve">
    <value>Codabar条码长度不得小于3，而且开头和结尾是字符'A'或'B'或'C'或'D'。</value>
  </data>
  <data name="Code11Error" xml:space="preserve">
    <value>Code11条码只能包含数字和字符'-'。</value>
  </data>
  <data name="Code128CannotDetermineStart" xml:space="preserve">
    <value>不能为Code128条码判别起始字符。</value>
  </data>
  <data name="Code128CannotFind_Value" xml:space="preserve">
    <value>不能为Code128条码插入“{0}”</value>
  </data>
  <data name="Code128InsertError" xml:space="preserve">
    <value>为Code128条码插入字符错误：</value>
  </data>
  <data name="Code128InvaliData" xml:space="preserve">
    <value>Code128:错误的数据或格式.</value>
  </data>
  <data name="Code128InvalidateCharacter_Value" xml:space="preserve">
    <value>Code128条码中出现错误的字符“{0}”。</value>
  </data>
  <data name="Code128UnknowStart" xml:space="preserve">
    <value>指定格式的Code128条码文本头错误。</value>
  </data>
  <data name="Code39InvaliData" xml:space="preserve">
    <value>Code39条码数据错误（可尝试Code39Extended条码）。</value>
  </data>
  <data name="Code93InvaliData" xml:space="preserve">
    <value>Code93:错误的数据,包含不支持的字符.</value>
  </data>
  <data name="EAN13InvaliCountry" xml:space="preserve">
    <value>EAN13:错误的国家代码。</value>
  </data>
  <data name="EAN13InvaliData" xml:space="preserve">
    <value>EAN13条码只能包含12或13个数字字符。</value>
  </data>
  <data name="EAN8InvaliData" xml:space="preserve">
    <value>EAN8:错误的数据，只能包含7或8个数字字符。</value>
  </data>
  <data name="I25InvaliData" xml:space="preserve">
    <value>I25:错误的数据，必须为偶数个数字字符。</value>
  </data>
  <data name="InvaliBarcodeStyle" xml:space="preserve">
    <value>错误的条码样式.</value>
  </data>
  <data name="ISBNInvaliData" xml:space="preserve">
    <value>ISBN:错误的数据，必须为9，10，12或13个数字，可能需要以“978”开头。</value>
  </data>
  <data name="JAN13InvaliData" xml:space="preserve">
    <value>JAN13:必须为数字，而且要“49”开头。</value>
  </data>
  <data name="MSIInvaliData" xml:space="preserve">
    <value>MSI:必须全部为数字字符。</value>
  </data>
  <data name="PostnetError" xml:space="preserve">
    <value>Postnet条码文本必须是长度为5、6、9或11的数字。</value>
  </data>
  <data name="S25InvaliData" xml:space="preserve">
    <value>S25:必须全部为数字字符。</value>
  </data>
  <data name="TextMustNotNull" xml:space="preserve">
    <value>条码文本不得为空.</value>
  </data>
  <data name="UnsupportedStyle" xml:space="preserve">
    <value>不支持的条码类型</value>
  </data>
  <data name="UPCAInvaliCountry" xml:space="preserve">
    <value>UPCA:错误的国家代码。</value>
  </data>
  <data name="UPCAInvaliData" xml:space="preserve">
    <value>UPCA:必须为12个数字字符。</value>
  </data>
  <data name="UPCEInvaliData" xml:space="preserve">
    <value>UPCE:必须为8或12个数字字符,可能需要以0或1开头。</value>
  </data>
  <data name="UPCS2InvaliData" xml:space="preserve">
    <value>UPCS2:必须为2个数字。</value>
  </data>
  <data name="UPCS5InvaliData" xml:space="preserve">
    <value>UPCS5:必须为5个数字。</value>
  </data>
</root>